{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class CalcLineService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.linesUrl = 'http://localhost:4201'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  log(message) {\n    this.messageService.add(`CalcLineService: ${message}`);\n  }\n  getAll() {\n    const url = `${this.linesUrl}/all`;\n    return this.http.get(url).pipe(tap(_ => this.log('fetched all')), catchError(this.handleError('getAll', [])));\n  }\n  getLine(id) {\n    const url = `${this.linesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched line id=${id}`)), catchError(this.handleError(`getLine id=${id}`)));\n  }\n  updateLine(line) {\n    const url = `${this.linesUrl}/${line.id}`;\n    return this.http.put(url, line, this.httpOptions).pipe(tap(_ => this.log(`updated line id=${line.id}`)), catchError(this.handleError('updateLine')));\n  }\n  /** POST: add a new line to the server */\n  addLine(line) {\n    return this.http.post(this.linesUrl, line, this.httpOptions).pipe(tap(newLine => this.log(`added line w/ id=${newLine.id}`)), catchError(this.handleError('addLine')));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteLine(id) {\n    const url = `${this.linesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted line id=${id}`)), catchError(this.handleError('deleteLine')));\n  }\n  /* GET lines whose name contains search term */\n  searchLines(term) {\n    if (!term.trim()) {\n      // if not search term, return empty array.\n      return of([]);\n    }\n    return this.http.get(`${this.linesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found lines matching \"${term}\"`) : this.log(`no lines matching \"${term}\"`)), catchError(this.handleError('searchLines', [])));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\nCalcLineService.ɵfac = function CalcLineService_Factory(t) {\n  return new (t || CalcLineService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nCalcLineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CalcLineService,\n  factory: CalcLineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","tap","CalcLineService","constructor","http","messageService","headers","log","message","add","getAll","url","linesUrl","get","pipe","_","handleError","getLine","id","updateLine","line","put","httpOptions","addLine","post","newLine","deleteLine","delete","searchLines","term","trim","x","length","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["/home/mike/Hacking/mcalc-web/mcalc/src/app/calc-line.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { CalcLine } from './calc-line';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalcLineService {\n\tprivate linesUrl = 'http://localhost:4201';  // URL to web api\n\n\tconstructor(\n\t\tprivate http: HttpClient,\n\t\tprivate messageService: MessageService\n\t) { }\n\n\tprivate log(message: string) {\n\t\tthis.messageService.add(`CalcLineService: ${message}`);\n\t}\n\n\thttpOptions = {\n\t\theaders: new HttpHeaders({ 'Content-Type': 'application/json' })\n\t};\n\n\tgetAll(): Observable<CalcLine[]> {\n\t\tconst url = `${this.linesUrl}/all`;\n\t\treturn this.http.get<CalcLine[]>(url)\n\t\t\t.pipe(\n\t\t\t\ttap(_ => this.log('fetched all')),\n\t\t\t\tcatchError(this.handleError<CalcLine[]>('getAll', []))\n\t\t\t);\n\t}\n\n\tgetLine(id: number): Observable<CalcLine> {\n\t\tconst url = `${this.linesUrl}/${id}`;\n\t\treturn this.http.get<CalcLine>(url).pipe(\n\t\t\ttap(_ => this.log(`fetched line id=${id}`)),\n\t\t\t\tcatchError(this.handleError<CalcLine>(`getLine id=${id}`))\n\t\t);\n\t}\n\n\tupdateLine(line: CalcLine): Observable<any> {\n\t\tconst url = `${this.linesUrl}/${line.id}`;\n\t\treturn this.http.put(url, line, this.httpOptions).pipe(\n\t\t\ttap(_ => this.log(`updated line id=${line.id}`)),\n\t\t\t\tcatchError(this.handleError<any>('updateLine'))\n\t\t);\n\t}\n\n\t/** POST: add a new line to the server */\n\taddLine(line: CalcLine): Observable<CalcLine> {\n\t\treturn this.http.post<CalcLine>(this.linesUrl, line, this.httpOptions).pipe(\n\t\t\ttap((newLine: CalcLine) => this.log(`added line w/ id=${newLine.id}`)),\n\t\t\t\tcatchError(this.handleError<CalcLine>('addLine'))\n\t\t);\n\t}\n\n\t/** DELETE: delete the hero from the server */\n\tdeleteLine(id: number): Observable<CalcLine> {\n\t\tconst url = `${this.linesUrl}/${id}`;\n\n\t\treturn this.http.delete<CalcLine>(url, this.httpOptions).pipe(\n\t\t\ttap(_ => this.log(`deleted line id=${id}`)),\n\t\t\t\tcatchError(this.handleError<CalcLine>('deleteLine'))\n\t\t);\n\t}\n\n\t/* GET lines whose name contains search term */\n\tsearchLines(term: string): Observable<CalcLine[]> {\n\t\tif (!term.trim()) {\n\t\t\t// if not search term, return empty array.\n\t\t\treturn of([]);\n\t\t}\n\t\treturn this.http.get<CalcLine[]>(`${this.linesUrl}/?name=${term}`).pipe(\n\t\t\ttap(x => x.length ?\n\t\t\t\tthis.log(`found lines matching \"${term}\"`) :\n\t\t\t\tthis.log(`no lines matching \"${term}\"`)),\n\t\t\tcatchError(this.handleError<CalcLine[]>('searchLines', []))\n\t\t);\n\t}\n\n\t/**\n\t * Handle Http operation that failed.\n\t * Let the app continue.\n\t *\n\t * @param operation - name of the operation that failed\n\t * @param result - optional value to return as the observable result\n\t */\n\tprivate handleError<T>(operation = 'operation', result?: T) {\n\t\treturn (error: any): Observable<T> => {\n\n\t\t\t// TODO: send the error to remote logging infrastructure\n\t\t\tconsole.error(error); // log to console instead\n\n\t\t\t// TODO: better job of transforming error for user consumption\n\t\t\tthis.log(`${operation} failed: ${error.message}`);\n\n\t\t\t// Let the app keep running by returning an empty result.\n\t\t\treturn of(result as T);\n\t\t};\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}