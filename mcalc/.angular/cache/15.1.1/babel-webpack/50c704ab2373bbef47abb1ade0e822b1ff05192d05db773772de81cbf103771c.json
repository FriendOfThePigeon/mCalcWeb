{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class CalcLineService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.linesUrl = 'http://localhost:4201/mock-calcs.json'; // URL to web api\n  }\n\n  log(message) {\n    this.messageService.add(`CalcLineService: ${message}`);\n  }\n  getAll() {\n    return this.http.get(this.linesUrl).pipe(tap(_ => this.log('fetched all')), catchError(this.handleError('getAll', [])));\n  }\n  getLine(id) {\n    const line = CALC_LINES.find(each => each.id === id);\n    this.log(`fetched line id=${id}`);\n    return of(result);\n  }\n  goBack() {\n    this.location.back();\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\nCalcLineService.ɵfac = function CalcLineService_Factory(t) {\n  return new (t || CalcLineService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nCalcLineService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CalcLineService,\n  factory: CalcLineService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAQrD,OAAM,MAAOC,eAAe;EAG3BC,YACSC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJf,aAAQ,GAAG,uCAAuC,CAAC,CAAE;EAKzD;;EAEIC,GAAG,CAACC,OAAe;IAC1B,IAAI,CAACF,cAAc,CAACG,GAAG,CAAC,oBAAoBD,OAAO,EAAE,CAAC;EACvD;EAEAE,MAAM;IACL,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAa,IAAI,CAACC,QAAQ,CAAC,CAC7CC,IAAI,CACJX,GAAG,CAACY,CAAC,IAAI,IAAI,CAACP,GAAG,CAAC,aAAa,CAAC,CAAC,EACjCN,UAAU,CAAC,IAAI,CAACc,WAAW,CAAa,QAAQ,EAAE,EAAE,CAAC,CAAC,CACtD;EACH;EAEAC,OAAO,CAACC,EAAU;IACjB,MAAMC,IAAI,GAAGC,UAAU,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAE;IACrD,IAAI,CAACV,GAAG,CAAC,mBAAmBU,EAAE,EAAE,CAAC;IACjC,OAAOjB,EAAE,CAACsB,MAAM,CAAC;EAClB;EAEAC,MAAM;IACL,IAAI,CAACC,QAAQ,CAACC,IAAI,EAAE;EACrB;EAEA;;;;;;;EAOQV,WAAW,CAAIW,SAAS,GAAG,WAAW,EAAEJ,MAAU;IACzD,OAAQK,KAAU,IAAmB;MAEpC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACpB,GAAG,CAAC,GAAGmB,SAAS,YAAYC,KAAK,CAACnB,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOR,EAAE,CAACsB,MAAW,CAAC;IACvB,CAAC;EACF;;AAjDYnB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA0B,SAAf1B,eAAe;EAAA2B,YAFd;AAAM","names":["of","catchError","tap","CalcLineService","constructor","http","messageService","log","message","add","getAll","get","linesUrl","pipe","_","handleError","getLine","id","line","CALC_LINES","find","each","result","goBack","location","back","operation","error","console","factory","providedIn"],"sourceRoot":"","sources":["/home/mike/Hacking/mcalc-web/mcalc/src/app/calc-line.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { CalcLine } from './calc-line';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalcLineService {\n\tprivate linesUrl = 'http://localhost:4201/mock-calcs.json';  // URL to web api\n\n\tconstructor(\n\t\tprivate http: HttpClient,\n\t\tprivate messageService: MessageService\n\t) { }\n\n\tprivate log(message: string) {\n\t\tthis.messageService.add(`CalcLineService: ${message}`);\n\t}\n\n\tgetAll(): Observable<CalcLine[]> {\n\t\treturn this.http.get<CalcLine[]>(this.linesUrl)\n\t\t\t.pipe(\n\t\t\t\ttap(_ => this.log('fetched all')),\n\t\t\t\tcatchError(this.handleError<CalcLine[]>('getAll', []))\n\t\t\t);\n\t}\n\n\tgetLine(id: number): Observable<CalcLine> {\n\t\tconst line = CALC_LINES.find(each => each.id === id)!;\n\t\tthis.log(`fetched line id=${id}`);\n\t\treturn of(result);\n\t}\n\n\tgoBack(): void {\n\t\tthis.location.back();\n\t}\n\n\t/**\n\t * Handle Http operation that failed.\n\t * Let the app continue.\n\t *\n\t * @param operation - name of the operation that failed\n\t * @param result - optional value to return as the observable result\n\t */\n\tprivate handleError<T>(operation = 'operation', result?: T) {\n\t\treturn (error: any): Observable<T> => {\n\n\t\t\t// TODO: send the error to remote logging infrastructure\n\t\t\tconsole.error(error); // log to console instead\n\n\t\t\t// TODO: better job of transforming error for user consumption\n\t\t\tthis.log(`${operation} failed: ${error.message}`);\n\n\t\t\t// Let the app keep running by returning an empty result.\n\t\t\treturn of(result as T);\n\t\t};\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}